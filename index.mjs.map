{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dtypes from '@stdlib/ndarray-dtypes';\nimport gsum from '@stdlib/blas-ext-base-ndarray-gsum';\nimport dsum from '@stdlib/blas-ext-base-ndarray-dsum';\nimport ssum from '@stdlib/blas-ext-base-ndarray-ssum';\nimport factory from '@stdlib/ndarray-base-unary-reduce-strided1d-dispatch-factory';\n\n\n// VARIABLES //\n\nvar idtypes = dtypes( 'numeric_and_generic' );\nvar odtypes = dtypes( 'numeric_and_generic' );\n\n// FIXME: consider defining an \"accumulation\" policy so that small integer arrays do not readily overflow (see the Array API Standard; if changed, need to update the README accordingly)\n\n// FIXME: may need to consider C arithmetic emulation, including for signed/unsigned integers, in order to ensure consistent results (currently, `gsum` accumulates in double-precision in JS; however, given that integer summation is modulo arithmetic, this may not be an issue, as the results may be the same)\n\n// FIXME: per the Array API Standard, if the output dtype differs from the input dtype, the input ndarray should be cast prior to computation (ref: https://data-apis.org/array-api/latest/API_specification/generated/array_api.sum.html)\nvar policy = 'same';\nvar table = {\n\t'types': [\n\t\t'float64', // input\n\t\t'float32'  // input\n\n\t\t// FIXME: add specialized support for `csum` and `zsum` once the corresponding packages are implemented\n\t],\n\t'fcns': [\n\t\tdsum,\n\t\tssum\n\t],\n\t'default': gsum\n};\n\n\n// MAIN //\n\n/**\n* Computes the sum along one or more ndarray dimensions.\n*\n* @name sum\n* @type {Function}\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform reduction:\n* var out = sum( x );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 39.0\n*/\nvar sum = factory( table, [ idtypes ], odtypes, policy );\n\n\n// EXPORTS //\n\nexport default sum;\n"],"names":["sum","factory","types","fcns","dsum","ssum","default","gsum","dtypes"],"mappings":";;2eA+BA,IAqEIA,EAAMC,EA5DE,CACXC,MAAS,CACR,UACA,WAIDC,KAAQ,CACPC,EACAC,GAEDC,QAAWC,GAiDc,CArEZC,EAAQ,wBACRA,EAAQ,uBAOT"}